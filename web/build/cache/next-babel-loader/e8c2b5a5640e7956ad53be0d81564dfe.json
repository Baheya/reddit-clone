{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Box, Link, Flex, Button, Heading } from '@chakra-ui/core';\nimport NextLink from 'next/link';\nimport { useMeQuery, useLogoutMutation } from '../generated/graphql';\nimport { isServer } from '../utils/isServer';\nimport { useRouter } from 'next/router';\nexport var NavBar = function NavBar(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n\n  var _useLogoutMutation = useLogoutMutation(),\n      _useLogoutMutation2 = _slicedToArray(_useLogoutMutation, 2),\n      logoutFetching = _useLogoutMutation2[0].fetching,\n      logout = _useLogoutMutation2[1];\n\n  var _useMeQuery = useMeQuery({\n    pause: isServer()\n  }),\n      _useMeQuery2 = _slicedToArray(_useMeQuery, 1),\n      _useMeQuery2$ = _useMeQuery2[0],\n      data = _useMeQuery2$.data,\n      fetching = _useMeQuery2$.fetching;\n\n  var body = null; // data is loading\n\n  if (fetching) {// user not logged in\n  } else if (!(data === null || data === void 0 ? void 0 : data.me)) {\n    body = __jsx(React.Fragment, null, __jsx(NextLink, {\n      href: \"/login\"\n    }, __jsx(Link, {\n      color: \"black\",\n      mr: 2\n    }, \"login\")), __jsx(NextLink, {\n      href: \"/register\"\n    }, __jsx(Link, {\n      color: \"black\"\n    }, \"register\"))); // user is logged in\n  } else {\n    body = __jsx(Flex, {\n      align: \"center\"\n    }, __jsx(NextLink, {\n      href: \"/create-post\"\n    }, __jsx(Button, {\n      as: Link,\n      mr: 4\n    }, \"Create Post\")), __jsx(Box, {\n      mr: 2\n    }, data.me.username), __jsx(Button, {\n      onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return logout();\n\n              case 2:\n                router.reload();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })),\n      isLoading: logoutFetching,\n      variant: \"link\"\n    }, \"logout\"));\n  }\n\n  return __jsx(Flex, {\n    zIndex: 1,\n    position: \"sticky\",\n    top: 0,\n    bg: \"tan\",\n    p: 4\n  }, __jsx(Flex, {\n    flex: 1,\n    maxW: 800,\n    m: \"auto\",\n    align: \"center\"\n  }, __jsx(NextLink, {\n    href: \"/\"\n  }, __jsx(Link, null, __jsx(Heading, null, \"Reddit\"))), __jsx(Box, {\n    ml: 'auto'\n  }, body)));\n};","map":null,"metadata":{},"sourceType":"module"}