{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/beya/Documents/Programming/reddit-clone/web/src/pages/create-post.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Wrapper } from '../components/Wrapper';\nimport { Formik, Form } from 'formik';\nimport login from './login';\nimport { toErrorMap } from '../utils/toErrorMap';\nimport { InputField } from '../components/InputField';\nimport { Box, Button } from '@chakra-ui/core';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../utils/createUrqlClient';\n\nvar CreatePost = function CreatePost(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(Wrapper, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      title: '',\n      text: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var _response$data, _response$data2;\n\n        var setErrors, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors = _ref2.setErrors;\n                _context.next = 3;\n                return login(values);\n\n              case 3:\n                response = _context.sent;\n\n                if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.login.errors) {\n                  setErrors(toErrorMap(response.data.login.errors));\n                } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.login.user) {\n                  // worked\n                  router.push('/');\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, function (_ref4) {\n    var isSubmitting = _ref4.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, __jsx(InputField, {\n      name: \"title\",\n      label: \"Title\",\n      placeholder: \"title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }\n    }), __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }\n    }, __jsx(InputField, {\n      name: \"text\",\n      label: \"Body\",\n      placeholder: \"text...\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    })), __jsx(Button, {\n      mt: 4,\n      type: \"submit\",\n      variantColor: \"teal\",\n      isLoading: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, \"Create Post\"));\n  })));\n};\n\n_c = CreatePost;\nexport default withUrqlClient(createUrqlClient)(CreatePost);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/pages/create-post.tsx"],"names":["React","Wrapper","Formik","Form","login","toErrorMap","InputField","Box","Button","withUrqlClient","createUrqlClient","CreatePost","title","text","values","setErrors","response","data","errors","user","router","push","isSubmitting"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,GAAT,EAA0BC,MAA1B,QAAwC,iBAAxC;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,gBAAT,QAAiC,2BAAjC;;AAEA,IAAMC,UAAwB,GAAG,SAA3BA,UAA2B,OAAQ;AAAA;;AACvC,SACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KADjB;AAEE,IAAA,QAAQ;AAAA,2EAAE,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,gBAAAA,SAAjB,SAAiBA,SAAjB;AAAA;AAAA,uBACeX,KAAK,CAACU,MAAD,CADpB;;AAAA;AACFE,gBAAAA,QADE;;AAER,sCAAIA,QAAQ,CAACC,IAAb,mDAAI,eAAeb,KAAf,CAAqBc,MAAzB,EAAiC;AAC/BH,kBAAAA,SAAS,CAACV,UAAU,CAACW,QAAQ,CAACC,IAAT,CAAcb,KAAd,CAAoBc,MAArB,CAAX,CAAT;AACD,iBAFD,MAEO,uBAAIF,QAAQ,CAACC,IAAb,oDAAI,gBAAeb,KAAf,CAAqBe,IAAzB,EAA+B;AACpC;AACAC,kBAAAA,MAAM,CAACC,IAAP,CAAY,GAAZ;AACD;;AAPO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYG;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,OAAjB;AAAyB,MAAA,KAAK,EAAC,OAA/B;AAAuC,MAAA,WAAW,EAAC,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,MAAjB;AAAwB,MAAA,KAAK,EAAC,MAA9B;AAAqC,MAAA,WAAW,EAAC,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,EAKE,MAAC,MAAD;AACE,MAAA,EAAE,EAAE,CADN;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,YAAY,EAAC,MAHf;AAIE,MAAA,SAAS,EAAEA,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALF,CADD;AAAA,GAZH,CADF,CADF,CADF;AAmCD,CApCD;;KAAMX,U;AAsCN,eAAeF,cAAc,CAACC,gBAAD,CAAd,CAAiCC,UAAjC,CAAf","sourcesContent":["import React from 'react';\nimport { Wrapper } from '../components/Wrapper';\nimport { Formik, Form } from 'formik';\nimport login from './login';\nimport { toErrorMap } from '../utils/toErrorMap';\nimport { InputField } from '../components/InputField';\nimport { Box, Flex, Link, Button } from '@chakra-ui/core';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../utils/createUrqlClient';\n\nconst CreatePost: React.FC<{}> = ({}) => {\n  return (\n    <Wrapper variant=\"small\">\n      <Wrapper variant=\"small\">\n        <Formik\n          initialValues={{ title: '', text: '' }}\n          onSubmit={async (values, { setErrors }) => {\n            const response = await login(values);\n            if (response.data?.login.errors) {\n              setErrors(toErrorMap(response.data.login.errors));\n            } else if (response.data?.login.user) {\n              // worked\n              router.push('/');\n            }\n          }}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              <InputField name=\"title\" label=\"Title\" placeholder=\"title\" />\n              <Box mt={4}>\n                <InputField name=\"text\" label=\"Body\" placeholder=\"text...\" />\n              </Box>\n              <Button\n                mt={4}\n                type=\"submit\"\n                variantColor=\"teal\"\n                isLoading={isSubmitting}\n              >\n                Create Post\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Wrapper>\n    </Wrapper>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient)(CreatePost);\n"]},"metadata":{},"sourceType":"module"}