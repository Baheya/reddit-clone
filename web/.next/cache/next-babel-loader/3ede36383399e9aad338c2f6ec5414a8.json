{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/beya/Documents/Programming/reddit-clone/web/src/pages/create-post.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { Formik, Form } from 'formik';\nimport { InputField } from '../components/InputField';\nimport { Box, Button } from '@chakra-ui/core';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../utils/createUrqlClient';\nimport { useCreatePostMutation, useMeQuery } from '../generated/graphql';\nimport { useRouter } from 'next/router';\nimport { Layout } from '../components/Layout';\n\nvar CreatePost = function CreatePost(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useMeQuery = useMeQuery(),\n      _useMeQuery2 = _slicedToArray(_useMeQuery, 1),\n      _useMeQuery2$ = _useMeQuery2[0],\n      data = _useMeQuery2$.data,\n      fetching = _useMeQuery2$.fetching;\n\n  var router = useRouter();\n  useEffect(function () {\n    if (!(data === null || data === void 0 ? void 0 : data.me)) {\n      router.replace('/login');\n    }\n  }, [data, router]);\n\n  var _useCreatePostMutatio = useCreatePostMutation(),\n      _useCreatePostMutatio2 = _slicedToArray(_useCreatePostMutatio, 2),\n      createPost = _useCreatePostMutatio2[1];\n\n  return __jsx(Layout, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      title: '',\n      text: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var setErrors, _yield$createPost, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors = _ref2.setErrors;\n                _context.next = 3;\n                return createPost({\n                  input: values\n                });\n\n              case 3:\n                _yield$createPost = _context.sent;\n                error = _yield$createPost.error;\n\n                if (!error) {\n                  router.push('/');\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, function (_ref4) {\n    var isSubmitting = _ref4.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }, __jsx(InputField, {\n      name: \"title\",\n      label: \"Title\",\n      placeholder: \"title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }), __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, __jsx(InputField, {\n      name: \"text\",\n      label: \"Body\",\n      placeholder: \"text...\",\n      textarea: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }\n    })), __jsx(Button, {\n      mt: 4,\n      type: \"submit\",\n      variantColor: \"teal\",\n      isLoading: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, \"Create Post\"));\n  }));\n};\n\n_s(CreatePost, \"wDwNbWZ/7G+cLSU+bpf5FxkOmy4=\", false, function () {\n  return [useMeQuery, useRouter, useCreatePostMutation];\n});\n\n_c = CreatePost;\nexport default withUrqlClient(createUrqlClient)(CreatePost);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/pages/create-post.tsx"],"names":["React","useEffect","Formik","Form","InputField","Box","Button","withUrqlClient","createUrqlClient","useCreatePostMutation","useMeQuery","useRouter","Layout","CreatePost","data","fetching","router","me","replace","createPost","title","text","values","setErrors","input","error","push","isSubmitting"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,iBAA5B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,qBAAT,EAAgCC,UAAhC,QAAkD,sBAAlD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,sBAAvB;;AAEA,IAAMC,UAAwB,GAAG,SAA3BA,UAA2B,OAAQ;AAAA;;AAAA;;AAAA,oBACVH,UAAU,EADA;AAAA;AAAA;AAAA,MAC9BI,IAD8B,iBAC9BA,IAD8B;AAAA,MACxBC,QADwB,iBACxBA,QADwB;;AAEvC,MAAMC,MAAM,GAAGL,SAAS,EAAxB;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,EAACa,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEG,EAAP,CAAJ,EAAe;AACbD,MAAAA,MAAM,CAACE,OAAP,CAAe,QAAf;AACD;AACF,GAJQ,EAIN,CAACJ,IAAD,EAAOE,MAAP,CAJM,CAAT;;AAJuC,8BAUhBP,qBAAqB,EAVL;AAAA;AAAA,MAU9BU,UAV8B;;AAWvC,SACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KADjB;AAEE,IAAA,QAAQ;AAAA,2EAAE,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBC,gBAAAA,SAAjB,SAAiBA,SAAjB;AAAA;AAAA,uBACgBJ,UAAU,CAAC;AAAEK,kBAAAA,KAAK,EAAEF;AAAT,iBAAD,CAD1B;;AAAA;AAAA;AACAG,gBAAAA,KADA,qBACAA,KADA;;AAER,oBAAI,CAACA,KAAL,EAAY;AACVT,kBAAAA,MAAM,CAACU,IAAP,CAAY,GAAZ;AACD;;AAJO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASG;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,OAAjB;AAAyB,MAAA,KAAK,EAAC,OAA/B;AAAuC,MAAA,WAAW,EAAC,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAC,MAFR;AAGE,MAAA,WAAW,EAAC,SAHd;AAIE,MAAA,QAAQ,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,EAUE,MAAC,MAAD;AACE,MAAA,EAAE,EAAE,CADN;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,YAAY,EAAC,MAHf;AAIE,MAAA,SAAS,EAAEA,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAVF,CADD;AAAA,GATH,CADF,CADF;AAmCD,CA9CD;;GAAMd,U;UACyBH,U,EACdC,S,EAQQF,qB;;;KAVnBI,U;AAgDN,eAAeN,cAAc,CAACC,gBAAD,CAAd,CAAiCK,UAAjC,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { Wrapper } from '../components/Wrapper';\nimport { Formik, Form } from 'formik';\nimport { InputField } from '../components/InputField';\nimport { Box, Button } from '@chakra-ui/core';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../utils/createUrqlClient';\nimport { useCreatePostMutation, useMeQuery } from '../generated/graphql';\nimport { useRouter } from 'next/router';\nimport { Layout } from '../components/Layout';\n\nconst CreatePost: React.FC<{}> = ({}) => {\n  const [{ data, fetching }] = useMeQuery();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!data?.me) {\n      router.replace('/login');\n    }\n  }, [data, router]);\n\n  const [, createPost] = useCreatePostMutation();\n  return (\n    <Layout variant=\"small\">\n      <Formik\n        initialValues={{ title: '', text: '' }}\n        onSubmit={async (values, { setErrors }) => {\n          const { error } = await createPost({ input: values });\n          if (!error) {\n            router.push('/');\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField name=\"title\" label=\"Title\" placeholder=\"title\" />\n            <Box mt={4}>\n              <InputField\n                name=\"text\"\n                label=\"Body\"\n                placeholder=\"text...\"\n                textarea\n              />\n            </Box>\n            <Button\n              mt={4}\n              type=\"submit\"\n              variantColor=\"teal\"\n              isLoading={isSubmitting}\n            >\n              Create Post\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Layout>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient)(CreatePost);\n"]},"metadata":{},"sourceType":"module"}