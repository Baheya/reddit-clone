{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\nexport var errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error === null || error === void 0 ? void 0 : error.message.includes('not authenticated')) {\n        Router.replace('/');\n      }\n    }));\n  };\n};\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: 'http://localhost:8080/graphql',\n    fetchOptions: {\n      credentials: 'include'\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      updates: {\n        Mutation: {\n          logout: function logout(_result, _args, cache, _info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          login: function login(_result, _args, cache, _info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, _args, cache, _info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","pipe","tap","MeDocument","betterUpdateQuery","Router","errorExchange","forward","ops$","error","message","includes","replace","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","_args","cache","_info","query","me","login","result","errors","user","register"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,aAAT,EAAkCC,aAAlC,QAAuD,MAAvD;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,OAA1B;AACA,SAGEC,UAHF,QAMO,sBANP;AAOA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAO,IAAMC,aAAuB,GAAG,SAA1BA,aAA0B;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,SAAiB,UAACC,IAAD,EAAU;AAChE,WAAOP,IAAI,CACTM,OAAO,CAACC,IAAD,CADE,EAETN,GAAG,CAAC,iBAAe;AAAA,UAAZO,KAAY,SAAZA,KAAY;;AACjB,UAAIA,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEC,OAAP,CAAeC,QAAf,CAAwB,mBAAxB,CAAJ,EAAkD;AAChDN,QAAAA,MAAM,CAACO,OAAP,CAAe,GAAf;AACD;AACF,KAJE,CAFM,CAAX;AAQD,GATsC;AAAA,CAAhC;AAWP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,WAAD;AAAA,SAAuB;AACrDC,IAAAA,GAAG,EAAE,+BADgD;AAErDC,IAAAA,YAAY,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAFuC;AAGrDC,IAAAA,SAAS,EAAE,CACTnB,aADS,EAETD,aAAa,CAAC;AACZqB,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,MAAM,EAAE,gBAACC,OAAD,EAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAAkC;AACxCrB,YAAAA,iBAAiB,CACfoB,KADe,EAEf;AAAEE,cAAAA,KAAK,EAAEvB;AAAT,aAFe,EAGfmB,OAHe,EAIf;AAAA,qBAAO;AAAEK,gBAAAA,EAAE,EAAE;AAAN,eAAP;AAAA,aAJe,CAAjB;AAMD,WARO;AASRC,UAAAA,KAAK,EAAE,eAACN,OAAD,EAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAAkC;AACvCrB,YAAAA,iBAAiB,CACfoB,KADe,EAEf;AACEE,cAAAA,KAAK,EAAEvB;AADT,aAFe,EAKfmB,OALe,EAMf,UAACO,MAAD,EAASH,KAAT,EAAmB;AACjB,kBAAIG,MAAM,CAACD,KAAP,CAAaE,MAAjB,EAAyB;AACvB,uBAAOJ,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLC,kBAAAA,EAAE,EAAEE,MAAM,CAACD,KAAP,CAAaG;AADZ,iBAAP;AAGD;AACF,aAdc,CAAjB;AAgBD,WA1BO;AA2BRC,UAAAA,QAAQ,EAAE,kBAACV,OAAD,EAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAAkC;AAC1CrB,YAAAA,iBAAiB,CACfoB,KADe,EAEf;AACEE,cAAAA,KAAK,EAAEvB;AADT,aAFe,EAKfmB,OALe,EAMf,UAACO,MAAD,EAASH,KAAT,EAAmB;AACjB,kBAAIG,MAAM,CAACG,QAAP,CAAgBF,MAApB,EAA4B;AAC1B,uBAAOJ,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLC,kBAAAA,EAAE,EAAEE,MAAM,CAACG,QAAP,CAAgBD;AADf,iBAAP;AAGD;AACF,aAdc,CAAjB;AAgBD;AA5CO;AADH;AADG,KAAD,CAFJ,EAoDTzB,aApDS,EAqDTQ,WArDS,EAsDTd,aAtDS;AAH0C,GAAvB;AAAA,CAAzB","sourcesContent":["import { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, Exchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n} from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\n\nexport const errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/');\n      }\n    })\n  );\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:8080/graphql',\n  fetchOptions: { credentials: 'include' as const },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          logout: (_result, _args, cache, _info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, _args, cache, _info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              {\n                query: MeDocument,\n              },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, _args, cache, _info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              {\n                query: MeDocument,\n              },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}