{"ast":null,"code":"var _jsxFileName = \"/Users/beya/Documents/Programming/reddit-clone/web/src/pages/register.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Formik, Form } from 'formik';\nimport { Box, Button } from '@chakra-ui/core';\nimport { Wrapper } from '../components/Wrapper';\nimport { InputField } from '../components/InputField';\nimport { useRegisterMutation } from '../generated/graphql';\nimport { toErrorMap } from '../utils/toErrorMap';\nimport { useRouter } from 'next/router';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../utils/createUrqlClient';\nexport const Register = ({}) => {\n  const router = useRouter();\n  const [, register] = useRegisterMutation();\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      email: '',\n      username: '',\n      password: ''\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await register({\n        options: values\n      });\n\n      if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.register.errors) {\n        setErrors(toErrorMap(response.data.register.errors));\n      } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.register.user) {\n        // worked\n        router.push('/');\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, __jsx(InputField, {\n    name: \"username\",\n    label: \"Username\",\n    placeholder: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }), __jsx(Box, {\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, __jsx(InputField, {\n    name: \"email\",\n    label: \"Email\",\n    placeholder: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, __jsx(InputField, {\n    name: \"password\",\n    label: \"Password\",\n    placeholder: \"password\",\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  })), __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    variantColor: \"teal\",\n    isLoading: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"Register\"))));\n};\nexport default withUrqlClient(createUrqlClient)(Register);","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/pages/register.tsx"],"names":["React","Formik","Form","Box","Button","Wrapper","InputField","useRegisterMutation","toErrorMap","useRouter","withUrqlClient","createUrqlClient","Register","router","register","email","username","password","values","setErrors","response","options","data","errors","user","push","isSubmitting"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik, Form } from 'formik';\nimport { Box, Button } from '@chakra-ui/core';\nimport { Wrapper } from '../components/Wrapper';\nimport { InputField } from '../components/InputField';\nimport { useRegisterMutation } from '../generated/graphql';\nimport { toErrorMap } from '../utils/toErrorMap';\nimport { useRouter } from 'next/router';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../utils/createUrqlClient';\n\ninterface registerProps {}\n\nexport const Register: React.FC<registerProps> = ({}) => {\n  const router = useRouter();\n  const [, register] = useRegisterMutation();\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ email: '', username: '', password: '' }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await register({ options: values });\n          if (response.data?.register.errors) {\n            setErrors(toErrorMap(response.data.register.errors));\n          } else if (response.data?.register.user) {\n            // worked\n            router.push('/');\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField\n              name=\"username\"\n              label=\"Username\"\n              placeholder=\"username\"\n            />\n            <Box mt={4}>\n              <InputField name=\"email\" label=\"Email\" placeholder=\"email\" />\n            </Box>\n            <Box mt={4}>\n              <InputField\n                name=\"password\"\n                label=\"Password\"\n                placeholder=\"password\"\n                type=\"password\"\n              />\n            </Box>\n            <Button\n              mt={4}\n              type=\"submit\"\n              variantColor=\"teal\"\n              isLoading={isSubmitting}\n            >\n              Register\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient)(Register);\n"]},"metadata":{},"sourceType":"module"}