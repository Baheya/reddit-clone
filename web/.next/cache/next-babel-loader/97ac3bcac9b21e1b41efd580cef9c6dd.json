{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/beya/Documents/Programming/reddit-clone/web/src/pages/post/[id].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { withUrqlClient } from 'next-urql';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { Layout } from '../../components/Layout';\nimport { usePostQuery } from '../../generated/graphql';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\n\nvar Post = function Post(_ref) {\n  _s();\n\n  var _data$post;\n\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n  var intId = typeof router.query.id === 'string' ? parseInt(router.query.id) : -1;\n\n  var _usePostQuery = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId\n    }\n  }),\n      _usePostQuery2 = _slicedToArray(_usePostQuery, 1),\n      _usePostQuery2$ = _usePostQuery2[0],\n      data = _usePostQuery2$.data,\n      fetching = _usePostQuery2$.fetching;\n\n  if (fetching) {\n    return __jsx(Layout, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, \"loading...\"));\n  }\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }, data === null || data === void 0 ? void 0 : (_data$post = data.post) === null || _data$post === void 0 ? void 0 : _data$post.text);\n};\n\n_s(Post, \"KVx7xZyhD2ECRgjoK+LwVfUvq4o=\", false, function () {\n  return [useRouter, usePostQuery];\n});\n\n_c = Post;\nexport default withUrqlClient(createUrqlClient, {\n  ssr: true\n})(Post);\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/pages/post/[id].tsx"],"names":["withUrqlClient","useRouter","React","Layout","usePostQuery","createUrqlClient","Post","router","intId","query","id","parseInt","pause","variables","data","fetching","post","text","ssr"],"mappings":";;;;;;;;AAAA,SAASA,cAAT,QAA+B,WAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAQ;AAAA;;AAAA;;AAAA;;AACnB,MAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,MAAMO,KAAK,GACT,OAAOD,MAAM,CAACE,KAAP,CAAaC,EAApB,KAA2B,QAA3B,GAAsCC,QAAQ,CAACJ,MAAM,CAACE,KAAP,CAAaC,EAAd,CAA9C,GAAkE,CAAC,CADrE;;AAFmB,sBAIUN,YAAY,CAAC;AACxCQ,IAAAA,KAAK,EAAEJ,KAAK,KAAK,CAAC,CADsB;AAExCK,IAAAA,SAAS,EAAE;AACTH,MAAAA,EAAE,EAAEF;AADK;AAF6B,GAAD,CAJtB;AAAA;AAAA;AAAA,MAIVM,IAJU,mBAIVA,IAJU;AAAA,MAIJC,QAJI,mBAIJA,QAJI;;AAWnB,MAAIA,QAAJ,EAAc;AACZ,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF;AAKD;;AAED,SAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASD,IAAT,aAASA,IAAT,qCAASA,IAAI,CAAEE,IAAf,+CAAS,WAAYC,IAArB,CAAP;AACD,CApBD;;GAAMX,I;UACWL,S,EAGcG,Y;;;KAJzBE,I;AAsBN,eAAeN,cAAc,CAACK,gBAAD,EAAmB;AAAEa,EAAAA,GAAG,EAAE;AAAP,CAAnB,CAAd,CAAgDZ,IAAhD,CAAf","sourcesContent":["import { withUrqlClient } from 'next-urql';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { Layout } from '../../components/Layout';\nimport { usePostQuery } from '../../generated/graphql';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\n\nconst Post = ({}) => {\n  const router = useRouter();\n  const intId =\n    typeof router.query.id === 'string' ? parseInt(router.query.id) : -1;\n  const [{ data, fetching }] = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId,\n    },\n  });\n\n  if (fetching) {\n    return (\n      <Layout>\n        <div>loading...</div>\n      </Layout>\n    );\n  }\n\n  return <Layout>{data?.post?.text}</Layout>;\n};\n\nexport default withUrqlClient(createUrqlClient, { ssr: true })(Post);\n"]},"metadata":{},"sourceType":"module"}