{"ast":null,"code":"var _jsxFileName = \"/Users/beya/Documents/Programming/reddit-clone/web/src/pages/post/edit/[id].tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\nimport { withUrqlClient } from 'next-urql';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { InputField } from '../../../components/InputField';\nimport { Layout } from '../../../components/Layout';\nimport { usePostQuery, useUpdatePostMutation } from '../../../generated/graphql';\nimport { createUrqlClient } from '../../../utils/createUrqlClient';\nimport { useGetIntId } from '../../../utils/useGetIntId';\n\nconst EditPost = ({}) => {\n  const router = useRouter();\n  const intId = useGetIntId();\n  const [{\n    data,\n    fetching\n  }] = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId\n    }\n  });\n  const [, updatePost] = useUpdatePostMutation();\n\n  if (fetching) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, \"loading...\"));\n  }\n\n  if (!(data === null || data === void 0 ? void 0 : data.post)) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, __jsx(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, \"Could not find post\"));\n  }\n\n  return __jsx(Layout, {\n    variant: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      title: data.post.title,\n      text: data.post.text\n    },\n    onSubmit: async values => {\n      //   const { error } = await createPost({ input: values });\n      //   if (!error) {\n      //     router.push('/');\n      //   }\n      await updatePost(_objectSpread({\n        id: intId\n      }, values));\n      router.back();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, __jsx(InputField, {\n    name: \"title\",\n    label: \"Title\",\n    placeholder: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), __jsx(Box, {\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, __jsx(InputField, {\n    name: \"text\",\n    label: \"Body\",\n    placeholder: \"text...\",\n    textarea: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  })), __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    variantColor: \"teal\",\n    isLoading: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"Update Post\"))));\n};\n\nexport default withUrqlClient(createUrqlClient)(EditPost);","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/pages/post/edit/[id].tsx"],"names":["Box","Button","Formik","Form","withUrqlClient","useRouter","React","InputField","Layout","usePostQuery","useUpdatePostMutation","createUrqlClient","useGetIntId","EditPost","router","intId","data","fetching","pause","variables","id","updatePost","post","title","text","values","back","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\nimport { withUrqlClient } from 'next-urql';\nimport { Router, useRouter } from 'next/router';\nimport React from 'react';\nimport { InputField } from '../../../components/InputField';\nimport { Layout } from '../../../components/Layout';\nimport {\n  usePostQuery,\n  useUpdatePostMutation,\n} from '../../../generated/graphql';\nimport { createUrqlClient } from '../../../utils/createUrqlClient';\nimport { useGetIntId } from '../../../utils/useGetIntId';\nimport { useGetPostFromUrl } from '../../../utils/useGetPostFromUrl';\n\nconst EditPost = ({}) => {\n  const router = useRouter();\n  const intId = useGetIntId();\n  const [{ data, fetching }] = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId,\n    },\n  });\n  const [, updatePost] = useUpdatePostMutation();\n  if (fetching) {\n    return (\n      <Layout>\n        <div>loading...</div>\n      </Layout>\n    );\n  }\n\n  if (!data?.post) {\n    return (\n      <Layout>\n        <Box>Could not find post</Box>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout variant=\"small\">\n      <Formik\n        initialValues={{ title: data.post.title, text: data.post.text }}\n        onSubmit={async (values) => {\n          //   const { error } = await createPost({ input: values });\n          //   if (!error) {\n          //     router.push('/');\n          //   }\n          await updatePost({ id: intId, ...values });\n          router.back();\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField name=\"title\" label=\"Title\" placeholder=\"title\" />\n            <Box mt={4}>\n              <InputField\n                name=\"text\"\n                label=\"Body\"\n                placeholder=\"text...\"\n                textarea\n              />\n            </Box>\n            <Button\n              mt={4}\n              type=\"submit\"\n              variantColor=\"teal\"\n              isLoading={isSubmitting}\n            >\n              Update Post\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Layout>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient)(EditPost);\n"]},"metadata":{},"sourceType":"module"}