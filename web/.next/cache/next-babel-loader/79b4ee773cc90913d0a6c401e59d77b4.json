{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { FormControl, FormLabel, Input, FormErrorMessage, Textarea } from '@chakra-ui/core';\nimport { useField } from 'formik';\nexport const InputField = (_ref) => {\n  let {\n    label,\n    size: _,\n    textarea\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"size\", \"textarea\"]);\n\n  let InputOrTextarea = Input;\n\n  if (textarea) {\n    InputOrTextarea = Textarea;\n  }\n\n  const [field, {\n    error\n  }] = useField(props);\n  return __jsx(FormControl, {\n    isInvalid: !!error\n  }, __jsx(FormLabel, {\n    htmlFor: field.name\n  }, label), __jsx(InputOrTextarea, _extends({}, field, props, {\n    id: field.name,\n    placeholder: props.placeholder\n  })), error ? __jsx(FormErrorMessage, null, error) : null);\n};","map":null,"metadata":{},"sourceType":"module"}