{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const PostSnippetFragmentDoc = gql`\n    fragment PostSnippet on Post {\n  id\n  createdAt\n  updatedAt\n  title\n  textSnippet\n  votes\n  voteStatus\n  author {\n    id\n    username\n  }\n}\n    `;\nexport const RegularErrorFragmentDoc = gql`\n    fragment RegularError on FieldError {\n  field\n  message\n}\n    `;\nexport const RegularUserFragmentDoc = gql`\n    fragment RegularUser on User {\n  id\n  username\n}\n    `;\nexport const RegularUserResponseFragmentDoc = gql`\n    fragment RegularUserResponse on UserResponse {\n  errors {\n    ...RegularError\n  }\n  user {\n    ...RegularUser\n  }\n}\n    ${RegularErrorFragmentDoc}\n${RegularUserFragmentDoc}`;\nexport const ChangePasswordDocument = gql`\n    mutation changePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport function useChangePasswordMutation() {\n  return Urql.useMutation(ChangePasswordDocument);\n}\n;\nexport const CreatePostDocument = gql`\n    mutation createPost($input: PostInput!) {\n  createPost(input: $input) {\n    id\n    createdAt\n    updatedAt\n    title\n    text\n    votes\n    authorId\n  }\n}\n    `;\nexport function useCreatePostMutation() {\n  return Urql.useMutation(CreatePostDocument);\n}\n;\nexport const DeletePostDocument = gql`\n    mutation DeletePost($id: Int!) {\n  deletePost(id: $id)\n}\n    `;\nexport function useDeletePostMutation() {\n  return Urql.useMutation(DeletePostDocument);\n}\n;\nexport const ForgotPasswordDocument = gql`\n    mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n    `;\nexport function useForgotPasswordMutation() {\n  return Urql.useMutation(ForgotPasswordDocument);\n}\n;\nexport const LoginDocument = gql`\n    mutation Login($usernameOrEmail: String!, $password: String!) {\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport function useLoginMutation() {\n  return Urql.useMutation(LoginDocument);\n}\n;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport function useLogoutMutation() {\n  return Urql.useMutation(LogoutDocument);\n}\n;\nexport const RegisterDocument = gql`\n    mutation Register($options: UsernamePasswordInput!) {\n  register(options: $options) {\n    ...RegularUserResponse\n  }\n}\n    ${RegularUserResponseFragmentDoc}`;\nexport function useRegisterMutation() {\n  return Urql.useMutation(RegisterDocument);\n}\n;\nexport const UpdatePostDocument = gql`\n    mutation UpdatePost($id: Int!, $title: String!, $text: String!) {\n  updatePost(id: $id, title: $title, text: $text) {\n    id\n    title\n    text\n    textSnippet\n  }\n}\n    `;\nexport function useUpdatePostMutation() {\n  return Urql.useMutation(UpdatePostDocument);\n}\n;\nexport const VoteDocument = gql`\n    mutation Vote($value: Int!, $postId: Int!) {\n  vote(value: $value, postId: $postId)\n}\n    `;\nexport function useVoteMutation() {\n  return Urql.useMutation(VoteDocument);\n}\n;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...RegularUser\n  }\n}\n    ${RegularUserFragmentDoc}`;\nexport function useMeQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: MeDocument\n  }, options));\n}\n;\nexport const PostDocument = gql`\n    query Post($id: Int!) {\n  post(id: $id) {\n    id\n    createdAt\n    updatedAt\n    title\n    text\n    votes\n    voteStatus\n    author {\n      id\n      username\n    }\n  }\n}\n    `;\nexport function usePostQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: PostDocument\n  }, options));\n}\n;\nexport const PostsDocument = gql`\n    query Posts($limit: Int!, $cursor: String) {\n  posts(limit: $limit, cursor: $cursor) {\n    hasMore\n    posts {\n      ...PostSnippet\n    }\n  }\n}\n    ${PostSnippetFragmentDoc}`;\nexport function usePostsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: PostsDocument\n  }, options));\n}\n;","map":null,"metadata":{},"sourceType":"module"}