{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\nimport { stringifyVariables } from '@urql/core';\n\nvar cursorPagination = function cursorPagination() {\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName;\n    var allFields = cache.inspectFields(entityKey);\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    });\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    var fieldKey = \"\".concat(fieldName, \"(\").concat(stringifyVariables(fieldArgs), \")\");\n    var isInCache = cache.resolveFieldByKey(entityKey, fieldKey);\n    info.partial = !isInCache;\n    var results = [];\n    fieldInfos.forEach(function (fi) {\n      var data = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      results.push.apply(results, _toConsumableArray(data));\n    });\n    return results; // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n    //   prevOffset = currentOffset;\n    // }\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport var errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error === null || error === void 0 ? void 0 : error.message.includes('not authenticated')) {\n        Router.replace('/');\n      }\n    }));\n  };\n};\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: 'http://localhost:8080/graphql',\n    fetchOptions: {\n      credentials: 'include'\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      resolvers: {\n        Query: {\n          posts: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          logout: function logout(_result, _args, cache, _info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          login: function login(_result, _args, cache, _info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, _args, cache, _info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","pipe","tap","MeDocument","betterUpdateQuery","Router","stringifyVariables","cursorPagination","_parent","fieldArgs","cache","info","entityKey","parentKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","isInCache","resolveFieldByKey","partial","results","forEach","fi","data","push","errorExchange","forward","ops$","error","message","includes","replace","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","resolvers","Query","posts","updates","Mutation","logout","_result","_args","_info","query","me","login","result","errors","user","register"],"mappings":"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","sourcesContent":["import { cacheExchange, Resolver } from '@urql/exchange-graphcache';\nimport { dedupExchange, Exchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n} from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\n\nimport { stringifyVariables } from '@urql/core';\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n}\n\nconst cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isInCache = cache.resolveFieldByKey(entityKey, fieldKey);\n    info.partial = !isInCache;\n\n    const results: string[] = [];\n    fieldInfos.forEach((fi) => {\n      const data = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string[];\n      results.push(...data);\n    });\n\n    return results;\n\n    // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n\n    //   prevOffset = currentOffset;\n    // }\n\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport const errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/');\n      }\n    })\n  );\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:8080/graphql',\n  fetchOptions: { credentials: 'include' as const },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      resolvers: {\n        Query: {\n          posts: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          logout: (_result, _args, cache, _info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, _args, cache, _info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              {\n                query: MeDocument,\n              },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, _args, cache, _info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              {\n                query: MeDocument,\n              },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}