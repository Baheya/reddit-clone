{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/beya/Documents/Programming/reddit-clone/web/src/pages/_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { ThemeProvider, CSSReset, ColorModeProvider } from '@chakra-ui/core';\nimport { createClient, Provider, dedupExchange, fetchExchange } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport theme from '../theme';\nimport { MeDocument, LogoutMutation } from '../generated/graphql';\n\nfunction betterUpdateQuery(cache, qi, result, fn) {\n  return cache.updateQuery(qi, function (data) {\n    return fn(result, data);\n  });\n}\n\nvar client = createClient({\n  url: 'http://localhost:8080/graphql',\n  fetchOptions: {\n    credentials: 'include'\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        logout: function logout(_result, _args, cache, _info) {\n          betterUpdateQuery < LogoutMutation;\n        },\n        login: function login(_result, _args, cache, _info) {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, function (result, query) {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: function register(_result, _args, cache, _info) {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, function (result, query) {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return __jsx(Provider, {\n    value: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, __jsx(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, __jsx(ColorModeProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, __jsx(CSSReset, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  })))));\n}\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/pages/_app.tsx"],"names":["ThemeProvider","CSSReset","ColorModeProvider","createClient","Provider","dedupExchange","fetchExchange","cacheExchange","theme","MeDocument","LogoutMutation","betterUpdateQuery","cache","qi","result","fn","updateQuery","data","client","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","_args","_info","login","query","errors","me","user","register","MyApp","Component","pageProps"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,iBAAlC,QAA2D,iBAA3D;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,EAAgDC,aAAhD,QAAqE,MAArE;AACA,SAASC,aAAT,QAAiD,2BAAjD;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SACEC,UADF,EAKEC,cALF,QAMO,sBANP;;AAQA,SAASC,iBAAT,CACEC,KADF,EAEEC,EAFF,EAGEC,MAHF,EAIEC,EAJF,EAKE;AACA,SAAOH,KAAK,CAACI,WAAN,CAAkBH,EAAlB,EAAsB,UAACI,IAAD;AAAA,WAAUF,EAAE,CAACD,MAAD,EAASG,IAAT,CAAZ;AAAA,GAAtB,CAAP;AACD;;AAED,IAAMC,MAAM,GAAGf,YAAY,CAAC;AAC1BgB,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAFY;AAG1BC,EAAAA,SAAS,EAAE,CACTjB,aADS,EAETE,aAAa,CAAC;AACZgB,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE,gBAACC,OAAD,EAAUC,KAAV,EAAiBf,KAAjB,EAAwBgB,KAAxB,EAAkC;AACxCjB,UAAAA,iBAAiB,GAAGD,cAApB;AACD,SAHO;AAIRmB,QAAAA,KAAK,EAAE,eAACH,OAAD,EAAUC,KAAV,EAAiBf,KAAjB,EAAwBgB,KAAxB,EAAkC;AACvCjB,UAAAA,iBAAiB,CACfC,KADe,EAEf;AACEkB,YAAAA,KAAK,EAAErB;AADT,WAFe,EAKfiB,OALe,EAMf,UAACZ,MAAD,EAASgB,KAAT,EAAmB;AACjB,gBAAIhB,MAAM,CAACe,KAAP,CAAaE,MAAjB,EAAyB;AACvB,qBAAOD,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLE,gBAAAA,EAAE,EAAElB,MAAM,CAACe,KAAP,CAAaI;AADZ,eAAP;AAGD;AACF,WAdc,CAAjB;AAgBD,SArBO;AAsBRC,QAAAA,QAAQ,EAAE,kBAACR,OAAD,EAAUC,KAAV,EAAiBf,KAAjB,EAAwBgB,KAAxB,EAAkC;AAC1CjB,UAAAA,iBAAiB,CACfC,KADe,EAEf;AACEkB,YAAAA,KAAK,EAAErB;AADT,WAFe,EAKfiB,OALe,EAMf,UAACZ,MAAD,EAASgB,KAAT,EAAmB;AACjB,gBAAIhB,MAAM,CAACoB,QAAP,CAAgBH,MAApB,EAA4B;AAC1B,qBAAOD,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLE,gBAAAA,EAAE,EAAElB,MAAM,CAACoB,QAAP,CAAgBD;AADf,eAAP;AAGD;AACF,WAdc,CAAjB;AAgBD;AAvCO;AADH;AADG,GAAD,CAFJ,EA+CT3B,aA/CS;AAHe,CAAD,CAA3B;;AAsDA,SAAS6B,KAAT,OAA8C;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,SAAkB,QAAlBA,SAAkB;AAC5C,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEnB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEV,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD,eAAe6B,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF,CADF,CADF;AAUD;;KAXQF,K;AAaT,eAAeA,KAAf","sourcesContent":["import { ThemeProvider, CSSReset, ColorModeProvider } from '@chakra-ui/core';\nimport { createClient, Provider, dedupExchange, fetchExchange } from 'urql';\nimport { cacheExchange, Cache, QueryInput } from '@urql/exchange-graphcache';\nimport theme from '../theme';\nimport {\n  MeDocument,\n  LoginMutation,\n  MeQuery,\n  RegisterMutation,\n  LogoutMutation,\n} from '../generated/graphql';\n\nfunction betterUpdateQuery<Result, Query>(\n  cache: Cache,\n  qi: QueryInput,\n  result: any,\n  fn: (r: Result, q: Query) => Query\n) {\n  return cache.updateQuery(qi, (data) => fn(result, data as any) as any);\n}\n\nconst client = createClient({\n  url: 'http://localhost:8080/graphql',\n  fetchOptions: { credentials: 'include' },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          logout: (_result, _args, cache, _info) => {\n            betterUpdateQuery < LogoutMutation;\n          },\n          login: (_result, _args, cache, _info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              {\n                query: MeDocument,\n              },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, _args, cache, _info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              {\n                query: MeDocument,\n              },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    fetchExchange,\n  ],\n});\n\nfunction MyApp({ Component, pageProps }: any) {\n  return (\n    <Provider value={client}>\n      <ThemeProvider theme={theme}>\n        <ColorModeProvider>\n          <CSSReset />\n          <Component {...pageProps} />\n        </ColorModeProvider>\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}