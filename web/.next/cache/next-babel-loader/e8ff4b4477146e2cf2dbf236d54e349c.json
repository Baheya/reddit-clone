{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                    fragment __ on Post {\\n                      votes\\n                      voteStatus\\n                    }\\n                  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                  fragment _ on Post {\\n                    id\\n                    votes\\n                    voteStatus\\n                  }\\n                \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport gql from 'graphql-tag';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\nimport { stringifyVariables } from '@urql/core';\nimport { isServer } from './isServer';\n\nvar cursorPagination = function cursorPagination() {\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName;\n    var allFields = cache.inspectFields(entityKey);\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    });\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    var fieldKey = \"\".concat(fieldName, \"(\").concat(stringifyVariables(fieldArgs), \")\");\n    var isInCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), 'posts');\n    info.partial = !isInCache;\n    var hasMore = true;\n    var results = [];\n    fieldInfos.forEach(function (fi) {\n      var key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      var data = cache.resolve(key, 'posts');\n\n      var _hasMore = cache.resolve(key, 'hasMore');\n\n      if (_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push.apply(results, _toConsumableArray(data));\n    });\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore: hasMore,\n      posts: results\n    }; // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n    //   prevOffset = currentOffset;\n    // }\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport var errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error === null || error === void 0 ? void 0 : error.message.includes('not authenticated')) {\n        Router.replace('/');\n      }\n    }));\n  };\n};\nexport var createUrqlClient = function createUrqlClient(ssrExchange, ctx) {\n  var cookie = '';\n\n  if (isServer()) {\n    var _ctx$req, _ctx$req$headers;\n\n    cookie = ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : (_ctx$req$headers = _ctx$req.headers) === null || _ctx$req$headers === void 0 ? void 0 : _ctx$req$headers.cookie;\n  }\n\n  return {\n    url: 'http://localhost:8080/graphql',\n    fetchOptions: {\n      credentials: 'include',\n      headers: cookie ? {\n        cookie: cookie\n      } : undefined\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      keys: {\n        PaginatedPosts: function PaginatedPosts() {\n          return null;\n        }\n      },\n      resolvers: {\n        Query: {\n          posts: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          deletePost: function deletePost(_result, args, cache, _info) {\n            cache.invalidate({\n              __typename: 'Post',\n              id: args.id\n            });\n          },\n          vote: function vote(_result, args, cache, _info) {\n            var _ref3 = args,\n                postId = _ref3.postId,\n                value = _ref3.value;\n            var data = cache.readFragment(gql(_templateObject()), {\n              id: postId\n            });\n\n            if (data) {\n              if (data.voteStatus === value) {\n                return;\n              }\n\n              var newVotes = data.votes + (!data.voteStatus ? 1 : 2) * value;\n              cache.writeFragment(gql(_templateObject2()), {\n                id: postId,\n                votes: newVotes,\n                voteStatus: value\n              });\n            }\n          },\n          createPost: function createPost(_result, _args, cache, _info) {\n            var allFields = cache.inspectFields('Query');\n            var fieldInfos = allFields.filter(function (info) {\n              return info.fieldName === 'posts';\n            });\n            fieldInfos.forEach(function (fi) {\n              cache.invalidate('Query', 'posts', fi.arguments || {});\n            });\n          },\n          logout: function logout(_result, _args, cache, _info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          login: function login(_result, _args, cache, _info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, _args, cache, _info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","gql","dedupExchange","fetchExchange","pipe","tap","MeDocument","betterUpdateQuery","Router","stringifyVariables","isServer","cursorPagination","_parent","fieldArgs","cache","info","entityKey","parentKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","isInCache","resolve","resolveFieldByKey","partial","hasMore","results","forEach","fi","key","data","_hasMore","push","__typename","posts","errorExchange","forward","ops$","error","message","includes","replace","createUrqlClient","ssrExchange","ctx","cookie","req","headers","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","deletePost","_result","args","_info","invalidate","id","vote","postId","value","readFragment","voteStatus","newVotes","votes","writeFragment","createPost","_args","arguments","logout","query","me","login","result","errors","user","register"],"mappings":"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","sourcesContent":["import { cacheExchange, Resolver } from '@urql/exchange-graphcache';\nimport gql from 'graphql-tag';\nimport { dedupExchange, Exchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n  VoteMutationVariables,\n  DeletePostMutationVariables,\n} from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\n\nimport { stringifyVariables } from '@urql/core';\nimport { isServer } from './isServer';\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n}\n\nconst cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isInCache = cache.resolve(\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\n      'posts'\n    );\n    info.partial = !isInCache;\n    let hasMore = true;\n\n    const results: string[] = [];\n    fieldInfos.forEach((fi) => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\n      const data = cache.resolve(key, 'posts') as string[];\n      const _hasMore = cache.resolve(key, 'hasMore');\n      if (_hasMore) {\n        hasMore = _hasMore as boolean;\n      }\n      results.push(...data);\n    });\n\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore,\n      posts: results,\n    };\n\n    // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n\n    //   prevOffset = currentOffset;\n    // }\n\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport const errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/');\n      }\n    })\n  );\n};\n\nexport const createUrqlClient = (ssrExchange: any, ctx: any) => {\n  let cookie = '';\n  if (isServer()) {\n    cookie = ctx?.req?.headers?.cookie;\n  }\n  return {\n    url: 'http://localhost:8080/graphql',\n    fetchOptions: {\n      credentials: 'include' as const,\n      headers: cookie ? { cookie } : undefined,\n    },\n    exchanges: [\n      dedupExchange,\n      cacheExchange({\n        keys: {\n          PaginatedPosts: () => null,\n        },\n        resolvers: {\n          Query: {\n            posts: cursorPagination(),\n          },\n        },\n        updates: {\n          Mutation: {\n            deletePost: (_result, args, cache, _info) => {\n              cache.invalidate({\n                __typename: 'Post',\n                id: (args as DeletePostMutationVariables).id,\n              });\n            },\n            vote: (_result, args, cache, _info) => {\n              const { postId, value } = args as VoteMutationVariables;\n              const data = cache.readFragment(\n                gql`\n                  fragment _ on Post {\n                    id\n                    votes\n                    voteStatus\n                  }\n                `,\n                { id: postId } as any\n              );\n              if (data) {\n                if (data.voteStatus === value) {\n                  return;\n                }\n                const newVotes =\n                  (data.votes as number) + (!data.voteStatus ? 1 : 2) * value;\n                cache.writeFragment(\n                  gql`\n                    fragment __ on Post {\n                      votes\n                      voteStatus\n                    }\n                  `,\n                  { id: postId, votes: newVotes, voteStatus: value } as any\n                );\n              }\n            },\n            createPost: (_result, _args, cache, _info) => {\n              const allFields = cache.inspectFields('Query');\n              const fieldInfos = allFields.filter(\n                (info) => info.fieldName === 'posts'\n              );\n              fieldInfos.forEach((fi) => {\n                cache.invalidate('Query', 'posts', fi.arguments || {});\n              });\n            },\n            logout: (_result, _args, cache, _info) => {\n              betterUpdateQuery<LogoutMutation, MeQuery>(\n                cache,\n                { query: MeDocument },\n                _result,\n                () => ({ me: null })\n              );\n            },\n            login: (_result, _args, cache, _info) => {\n              betterUpdateQuery<LoginMutation, MeQuery>(\n                cache,\n                {\n                  query: MeDocument,\n                },\n                _result,\n                (result, query) => {\n                  if (result.login.errors) {\n                    return query;\n                  } else {\n                    return {\n                      me: result.login.user,\n                    };\n                  }\n                }\n              );\n            },\n            register: (_result, _args, cache, _info) => {\n              betterUpdateQuery<RegisterMutation, MeQuery>(\n                cache,\n                {\n                  query: MeDocument,\n                },\n                _result,\n                (result, query) => {\n                  if (result.register.errors) {\n                    return query;\n                  } else {\n                    return {\n                      me: result.register.user,\n                    };\n                  }\n                }\n              );\n            },\n          },\n        },\n      }),\n      errorExchange,\n      ssrExchange,\n      fetchExchange,\n    ],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}