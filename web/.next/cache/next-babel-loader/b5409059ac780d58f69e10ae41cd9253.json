{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\nimport { stringifyVariables } from '@urql/core';\n\nconst cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isInCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), 'posts');\n    info.partial = !isInCache;\n    let hasMore = true;\n    const results = [];\n    fieldInfos.forEach(fi => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      const data = cache.resolve(key, 'posts');\n\n      const _hasMore = cache.resolve(key, 'hasMore');\n\n      if (_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push(...data);\n    });\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore,\n      posts: results\n    }; // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n    //   prevOffset = currentOffset;\n    // }\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport const errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error === null || error === void 0 ? void 0 : error.message.includes('not authenticated')) {\n      Router.replace('/');\n    }\n  }));\n};\nexport const createUrqlClient = ssrExchange => ({\n  url: 'http://localhost:8080/graphql',\n  fetchOptions: {\n    credentials: 'include'\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    keys: {\n      PaginatedPosts: () => null\n    },\n    resolvers: {\n      Query: {\n        posts: cursorPagination()\n      }\n    },\n    updates: {\n      Mutation: {\n        createPost: (_result, _args, cache, _info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.createPost.id) {\n              return {\n                result\n              };\n            }\n          });\n        },\n        logout: (_result, _args, cache, _info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        },\n        login: (_result, _args, cache, _info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, _args, cache, _info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), errorExchange, ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","pipe","tap","MeDocument","betterUpdateQuery","Router","stringifyVariables","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","isInCache","resolve","resolveFieldByKey","partial","hasMore","results","forEach","fi","key","data","_hasMore","push","__typename","posts","errorExchange","forward","ops$","error","message","includes","replace","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","createPost","_result","_args","_info","query","result","id","logout","me","login","errors","user","register"],"mappings":"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","sourcesContent":["import { cacheExchange, Resolver } from '@urql/exchange-graphcache';\nimport { dedupExchange, Exchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n  CreatePostMutation,\n} from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\n\nimport { stringifyVariables } from '@urql/core';\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n}\n\nconst cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isInCache = cache.resolve(\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\n      'posts'\n    );\n    info.partial = !isInCache;\n    let hasMore = true;\n\n    const results: string[] = [];\n    fieldInfos.forEach((fi) => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\n      const data = cache.resolve(key, 'posts') as string[];\n      const _hasMore = cache.resolve(key, 'hasMore');\n      if (_hasMore) {\n        hasMore = _hasMore as boolean;\n      }\n      results.push(...data);\n    });\n\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore,\n      posts: results,\n    };\n\n    // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n\n    //   prevOffset = currentOffset;\n    // }\n\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport const errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/');\n      }\n    })\n  );\n};\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: 'http://localhost:8080/graphql',\n  fetchOptions: { credentials: 'include' as const },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      keys: {\n        PaginatedPosts: () => null,\n      },\n      resolvers: {\n        Query: {\n          posts: cursorPagination(),\n        },\n      },\n      updates: {\n        Mutation: {\n          createPost: (_result, _args, cache, _info) => {\n            betterUpdateQuery<CreatePostMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.createPost.id) {\n                  return {\n                    result,\n                  };\n                }\n              }\n            );\n          },\n          logout: (_result, _args, cache, _info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, _args, cache, _info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              {\n                query: MeDocument,\n              },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, _args, cache, _info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              {\n                query: MeDocument,\n              },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    errorExchange,\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}