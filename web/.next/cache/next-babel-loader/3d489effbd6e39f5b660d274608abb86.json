{"ast":null,"code":"import { cacheExchange } from '@urql/exchange-graphcache';\nimport gql from 'graphql-tag';\nimport { dedupExchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport { MeDocument } from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\nimport { stringifyVariables } from '@urql/core';\nimport { isServer } from './isServer';\n\nconst cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isInCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), 'posts');\n    info.partial = !isInCache;\n    let hasMore = true;\n    const results = [];\n    fieldInfos.forEach(fi => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      const data = cache.resolve(key, 'posts');\n\n      const _hasMore = cache.resolve(key, 'hasMore');\n\n      if (_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push(...data);\n    });\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore,\n      posts: results\n    }; // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n    //   prevOffset = currentOffset;\n    // }\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport const errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error === null || error === void 0 ? void 0 : error.message.includes('not authenticated')) {\n      Router.replace('/');\n    }\n  }));\n};\nexport const createUrqlClient = (ssrExchange, ctx) => {\n  let cookie = '';\n\n  if (isServer()) {\n    cookie = ctx.req.headers.cookie;\n  }\n\n  return {\n    url: 'http://localhost:8080/graphql',\n    fetchOptions: {\n      credentials: 'include',\n      headers: cookie ? {\n        cookie\n      } : undefined\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      keys: {\n        PaginatedPosts: () => null\n      },\n      resolvers: {\n        Query: {\n          posts: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          deletePost: (_result, args, cache, _info) => {},\n          vote: (_result, args, cache, _info) => {\n            const {\n              postId,\n              value\n            } = args;\n            const data = cache.readFragment(gql`\n                  fragment _ on Post {\n                    id\n                    votes\n                    voteStatus\n                  }\n                `, {\n              id: postId\n            });\n\n            if (data) {\n              if (data.voteStatus === value) {\n                return;\n              }\n\n              const newVotes = data.votes + (!data.voteStatus ? 1 : 2) * value;\n              cache.writeFragment(gql`\n                    fragment __ on Post {\n                      votes\n                      voteStatus\n                    }\n                  `, {\n                id: postId,\n                votes: newVotes,\n                voteStatus: value\n              });\n            }\n          },\n          createPost: (_result, _args, cache, _info) => {\n            const allFields = cache.inspectFields('Query');\n            const fieldInfos = allFields.filter(info => info.fieldName === 'posts');\n            fieldInfos.forEach(fi => {\n              cache.invalidate('Query', 'posts', fi.arguments || {});\n            });\n          },\n          logout: (_result, _args, cache, _info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, () => ({\n              me: null\n            }));\n          },\n          login: (_result, _args, cache, _info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, (result, query) => {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: (_result, _args, cache, _info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, (result, query) => {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/utils/createUrqlClient.ts"],"names":["cacheExchange","gql","dedupExchange","fetchExchange","pipe","tap","MeDocument","betterUpdateQuery","Router","stringifyVariables","isServer","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","isInCache","resolve","resolveFieldByKey","partial","hasMore","results","forEach","fi","key","data","_hasMore","push","__typename","posts","errorExchange","forward","ops$","error","message","includes","replace","createUrqlClient","ssrExchange","ctx","cookie","req","headers","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","deletePost","_result","args","_info","vote","postId","value","readFragment","id","voteStatus","newVotes","votes","writeFragment","createPost","_args","invalidate","arguments","logout","query","me","login","result","errors","user","register"],"mappings":"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","sourcesContent":["import { cacheExchange, Resolver } from '@urql/exchange-graphcache';\nimport gql from 'graphql-tag';\nimport { dedupExchange, Exchange, fetchExchange } from 'urql';\nimport { pipe, tap } from 'wonka';\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  RegisterMutation,\n  CreatePostMutation,\n  VoteMutationVariables,\n} from '../generated/graphql';\nimport { betterUpdateQuery } from './betterUpdateQuery';\nimport Router from 'next/router';\n\nimport { stringifyVariables } from '@urql/core';\nimport { isServer } from './isServer';\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n}\n\nconst cursorPagination = (): Resolver => {\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isInCache = cache.resolve(\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\n      'posts'\n    );\n    info.partial = !isInCache;\n    let hasMore = true;\n\n    const results: string[] = [];\n    fieldInfos.forEach((fi) => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\n      const data = cache.resolve(key, 'posts') as string[];\n      const _hasMore = cache.resolve(key, 'hasMore');\n      if (_hasMore) {\n        hasMore = _hasMore as boolean;\n      }\n      results.push(...data);\n    });\n\n    return {\n      __typename: 'PaginatedPosts',\n      hasMore,\n      posts: results,\n    };\n\n    // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n\n    //   prevOffset = currentOffset;\n    // }\n\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport const errorExchange: Exchange = ({ forward }) => (ops$) => {\n  return pipe(\n    forward(ops$),\n    tap(({ error }) => {\n      if (error?.message.includes('not authenticated')) {\n        Router.replace('/');\n      }\n    })\n  );\n};\n\nexport const createUrqlClient = (ssrExchange: any, ctx: any) => {\n  let cookie = '';\n  if (isServer()) {\n    cookie = ctx.req.headers.cookie;\n  }\n  return {\n    url: 'http://localhost:8080/graphql',\n    fetchOptions: {\n      credentials: 'include' as const,\n      headers: cookie ? { cookie } : undefined,\n    },\n    exchanges: [\n      dedupExchange,\n      cacheExchange({\n        keys: {\n          PaginatedPosts: () => null,\n        },\n        resolvers: {\n          Query: {\n            posts: cursorPagination(),\n          },\n        },\n        updates: {\n          Mutation: {\n            deletePost: (_result, args, cache, _info) => {},\n            vote: (_result, args, cache, _info) => {\n              const { postId, value } = args as VoteMutationVariables;\n              const data = cache.readFragment(\n                gql`\n                  fragment _ on Post {\n                    id\n                    votes\n                    voteStatus\n                  }\n                `,\n                { id: postId } as any\n              );\n              if (data) {\n                if (data.voteStatus === value) {\n                  return;\n                }\n                const newVotes =\n                  (data.votes as number) + (!data.voteStatus ? 1 : 2) * value;\n                cache.writeFragment(\n                  gql`\n                    fragment __ on Post {\n                      votes\n                      voteStatus\n                    }\n                  `,\n                  { id: postId, votes: newVotes, voteStatus: value } as any\n                );\n              }\n            },\n            createPost: (_result, _args, cache, _info) => {\n              const allFields = cache.inspectFields('Query');\n              const fieldInfos = allFields.filter(\n                (info) => info.fieldName === 'posts'\n              );\n              fieldInfos.forEach((fi) => {\n                cache.invalidate('Query', 'posts', fi.arguments || {});\n              });\n            },\n            logout: (_result, _args, cache, _info) => {\n              betterUpdateQuery<LogoutMutation, MeQuery>(\n                cache,\n                { query: MeDocument },\n                _result,\n                () => ({ me: null })\n              );\n            },\n            login: (_result, _args, cache, _info) => {\n              betterUpdateQuery<LoginMutation, MeQuery>(\n                cache,\n                {\n                  query: MeDocument,\n                },\n                _result,\n                (result, query) => {\n                  if (result.login.errors) {\n                    return query;\n                  } else {\n                    return {\n                      me: result.login.user,\n                    };\n                  }\n                }\n              );\n            },\n            register: (_result, _args, cache, _info) => {\n              betterUpdateQuery<RegisterMutation, MeQuery>(\n                cache,\n                {\n                  query: MeDocument,\n                },\n                _result,\n                (result, query) => {\n                  if (result.register.errors) {\n                    return query;\n                  } else {\n                    return {\n                      me: result.register.user,\n                    };\n                  }\n                }\n              );\n            },\n          },\n        },\n      }),\n      errorExchange,\n      ssrExchange,\n      fetchExchange,\n    ],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}