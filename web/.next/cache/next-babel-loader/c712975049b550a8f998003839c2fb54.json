{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button } from '@chakra-ui/core';\nimport { Form, Formik } from 'formik';\nimport { withUrqlClient } from 'next-urql';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { InputField } from '../../../components/InputField';\nimport { Layout } from '../../../components/Layout';\nimport { usePostQuery, useUpdatePostMutation } from '../../../generated/graphql';\nimport { createUrqlClient } from '../../../utils/createUrqlClient';\nimport { useGetIntId } from '../../../utils/useGetIntId';\n\nconst EditPost = ({}) => {\n  const router = useRouter();\n  const intId = useGetIntId();\n  const [{\n    data,\n    fetching\n  }] = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId\n    }\n  });\n  const [, updatePost] = useUpdatePostMutation();\n\n  if (fetching) {\n    return __jsx(Layout, null, __jsx(\"div\", null, \"loading...\"));\n  }\n\n  if (!(data === null || data === void 0 ? void 0 : data.post)) {\n    return __jsx(Layout, null, __jsx(Box, null, \"Could not find post\"));\n  }\n\n  return __jsx(Layout, {\n    variant: \"small\"\n  }, __jsx(Formik, {\n    initialValues: {\n      title: data.post.title,\n      text: data.post.text\n    },\n    onSubmit: async values => {\n      await updatePost(_objectSpread({\n        id: intId\n      }, values));\n      router.back();\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, null, __jsx(InputField, {\n    name: \"title\",\n    label: \"Title\",\n    placeholder: \"title\"\n  }), __jsx(Box, {\n    mt: 4\n  }, __jsx(InputField, {\n    name: \"text\",\n    label: \"Body\",\n    placeholder: \"text...\",\n    textarea: true\n  })), __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    variantColor: \"teal\",\n    isLoading: isSubmitting\n  }, \"Update Post\"))));\n};\n\nexport default withUrqlClient(createUrqlClient)(EditPost);","map":null,"metadata":{},"sourceType":"module"}