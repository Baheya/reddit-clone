{"ast":null,"code":"var _jsxFileName = \"/Users/beya/Documents/Programming/reddit-clone/web/src/pages/post/[id].tsx\";\nvar __jsx = React.createElement;\nimport { Box, Heading } from '@chakra-ui/core';\nimport { withUrqlClient } from 'next-urql';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { Layout } from '../../components/Layout';\nimport { usePostQuery } from '../../generated/graphql';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\n\nconst Post = ({}) => {\n  const router = useRouter();\n  const intId = typeof router.query.id === 'string' ? parseInt(router.query.id) : -1;\n  const [{\n    data,\n    fetching,\n    error\n  }] = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId\n    }\n  });\n\n  if (fetching) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, \"loading...\"));\n  }\n\n  if (error) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 12\n      }\n    }, error.message);\n  }\n\n  if (!(data === null || data === void 0 ? void 0 : data.post)) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, __jsx(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"Could not find post\"));\n  }\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, data === null || data === void 0 ? void 0 : data.post.title), data === null || data === void 0 ? void 0 : data.post.text);\n};\n\nexport default withUrqlClient(createUrqlClient, {\n  ssr: true\n})(Post);","map":{"version":3,"sources":["/Users/beya/Documents/Programming/reddit-clone/web/src/pages/post/[id].tsx"],"names":["Box","Heading","withUrqlClient","useRouter","React","Layout","usePostQuery","createUrqlClient","Post","router","intId","query","id","parseInt","data","fetching","error","pause","variables","message","post","title","text","ssr"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,OAAd,QAA6B,iBAA7B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;;AAEA,MAAMC,IAAI,GAAG,CAAC,EAAD,KAAQ;AACnB,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAMO,KAAK,GACT,OAAOD,MAAM,CAACE,KAAP,CAAaC,EAApB,KAA2B,QAA3B,GAAsCC,QAAQ,CAACJ,MAAM,CAACE,KAAP,CAAaC,EAAd,CAA9C,GAAkE,CAAC,CADrE;AAEA,QAAM,CAAC;AAAEE,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,GAAD,IAA8BV,YAAY,CAAC;AAC/CW,IAAAA,KAAK,EAAEP,KAAK,KAAK,CAAC,CAD6B;AAE/CQ,IAAAA,SAAS,EAAE;AACTN,MAAAA,EAAE,EAAEF;AADK;AAFoC,GAAD,CAAhD;;AAOA,MAAIK,QAAJ,EAAc;AACZ,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF;AAKD;;AAED,MAAIC,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,KAAK,CAACG,OAAZ,CAAP;AACD;;AAED,MAAI,EAACL,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEM,IAAP,CAAJ,EAAiB;AACf,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF;AAKD;;AAED,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUN,IAAV,aAAUA,IAAV,uBAAUA,IAAI,CAAEM,IAAN,CAAWC,KAArB,CADF,EAEGP,IAFH,aAEGA,IAFH,uBAEGA,IAAI,CAAEM,IAAN,CAAWE,IAFd,CADF;AAMD,CArCD;;AAuCA,eAAepB,cAAc,CAACK,gBAAD,EAAmB;AAAEgB,EAAAA,GAAG,EAAE;AAAP,CAAnB,CAAd,CAAgDf,IAAhD,CAAf","sourcesContent":["import { Box, Heading } from '@chakra-ui/core';\nimport { withUrqlClient } from 'next-urql';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { Layout } from '../../components/Layout';\nimport { usePostQuery } from '../../generated/graphql';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\n\nconst Post = ({}) => {\n  const router = useRouter();\n  const intId =\n    typeof router.query.id === 'string' ? parseInt(router.query.id) : -1;\n  const [{ data, fetching, error }] = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId,\n    },\n  });\n\n  if (fetching) {\n    return (\n      <Layout>\n        <div>loading...</div>\n      </Layout>\n    );\n  }\n\n  if (error) {\n    return <div>{error.message}</div>;\n  }\n\n  if (!data?.post) {\n    return (\n      <Layout>\n        <Box>Could not find post</Box>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <Heading>{data?.post.title}</Heading>\n      {data?.post.text}\n    </Layout>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient, { ssr: true })(Post);\n"]},"metadata":{},"sourceType":"module"}